################################################
# this file is created by me                   #
# to inherete the file generated by pyside-uic #
################################################

from PySide6.QtWidgets import QMainWindow
from ui_mainwindow import Ui_MainWindow
from help_dialog import DialogWindow
import note_management as noteManager

class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

        self.setWindowTitle("NoteBook v2.0")
        self.printNotes()
        self.lineEdit.setText("Type your new note here")
        self.textBrowser.append("Welcome to Notebook Application!\nClick the Help Button to see instructions about the application")

        ########## signals and slots connections ##################################
        self.yourNotesListWidget.itemPressed.connect(self.onNotesItemSelectionChanged)
        self.doneNotesListWidget.itemSelectionChanged.connect(self.onDoneItemSelectionChanged)
        self.newButton.clicked.connect(lambda: noteManager.newAction(self))       #
        self.doneButton.clicked.connect(lambda:noteManager.doneAction(self))      #
        self.editButton.clicked.connect(lambda: noteManager.editAction(self))     #
        self.deleteButton.clicked.connect(lambda: noteManager.deleteAction(self)) #
        self.exitButton.clicked.connect(noteManager.exitAction)                   #
        self.toggleListButton.clicked.connect(self.onToggleListButtonClicked)     #
        self.helpButton.clicked.connect(self.onHelpButtonClicked)                 #
        self.clearButton.clicked.connect(self.onClearButtonClicked)
        ###########################################################################

    def printNotes(self):
        """
        Gets notes saved from noteManager note lists, and adds them to QListWidgets

        """
        self.yourNotesListWidget.clear()
        self.doneNotesListWidget.clear()

        noteIndex = 1
        for notes in noteManager.noteList:
            notes = str(noteIndex) + ") " + notes
            self.yourNotesListWidget.addItem(notes)
            noteIndex = noteIndex + 1

        noteIndex = 1
        for notes in noteManager.doneList:
            notes = str(noteIndex) + ") " + notes
            self.doneNotesListWidget.addItem(notes)
            noteIndex = noteIndex + 1

    def onNotesItemSelectionChanged(self):
        """
        Slot method to handle item selection on yourNotesListWidget

        Disables newButton, enables doneButton, editButton and deleteButton.
        Then copies the content of the selected item to lineEdit to be edited by user.

        """
        self.newButton.setEnabled(False)
        self.doneButton.setEnabled(True)
        self.editButton.setEnabled(True)
        self.deleteButton.setEnabled(True)
        selectedItem = self.yourNotesListWidget.currentRow()
        self.lineEdit.setText(noteManager.noteList[selectedItem]) # to copy content to lineEdit for user editting

    def onDoneItemSelectionChanged(self):
        """
        Slot method to handle item selection on doneNotesListWidget

        Enables deleteButton to be deleted by user.

        """
        self.deleteButton.setEnabled(True)

    def resetButtonStates(self):
        """
        Resets all buttons to default states.

        """
        self.newButton.setEnabled(True)
        self.doneButton.setEnabled(False)
        self.editButton.setEnabled(False)
        self.deleteButton.setEnabled(False)

    def onToggleListButtonClicked(self):
        """
        Slot method to handle click action on toggleListButton

        Changes the current page and sets button states according to the page.

        """
        if self.stackedWidget.currentIndex() == 0:
            self.stackedWidget.setCurrentIndex(1)
            # disable all buttons since they are functional on the first page
            self.newButton.setEnabled(False)
            self.doneButton.setEnabled(False)
            self.editButton.setEnabled(False)
            self.deleteButton.setEnabled(False)
        elif self.stackedWidget.currentIndex() == 1:
            self.stackedWidget.setCurrentIndex(0)
            self.resetButtonStates()

    def onHelpButtonClicked(self):
        """
        Slot method to handle click action on helpButton

        Creates an instance of DialogWindow to show informative data

        """
        self.helpUi = DialogWindow()

    def onClearButtonClicked(self):
        """
        Slot method to handle click action on clearButton

        Clears the informative message history on the textBrowser widget.

        """
        self.textBrowser.clear()

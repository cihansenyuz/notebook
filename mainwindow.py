################################################
# this file is created by me                   #
# to inherete the file generated by pyside-uic #
################################################

from typing import Optional
from PySide6.QtCore import Qt
from PySide6.QtWidgets import QMainWindow, QWidget
from ui_mainwindow import Ui_MainWindow

class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

        self.setWindowTitle("NoteBook v2.0")
        
        ### button signals and slots connections #############
        self.newButton.clicked.connect(self.newAction)       #
        self.doneButton.clicked.connect(self.doneAction)     #
        self.editButton.clicked.connect(self.editAction)     #
        self.deleteButton.clicked.connect(self.deleteAction) #
        self.exitButton.clicked.connect(self.exitAction)     #
        ######################################################

        ### get saved notes from previous run ###########
        self.noteList = self.getNotes("notes.txt")      #
        self.doneList = self.getNotes("done_notes.txt") #
        #################################################

    def getNotes(self, sourceFileName):
        '''(string) -> list
        This function reads the file and creates a list from the data, returns the list
        '''
        tempList = []
        try:
            with open(sourceFileName, "r") as file:
                for line in file:
                    tempList.append(line)
        except FileNotFoundError:
            print("Warning: No file(s) found, if you had saved notes, check whether the directory is correct\n")
        except Exception:
            print("Error: Something went wrong, please try again\n")
        return tempList

    def printNotes(self):
        '''(int) -> none
        This function prints all the notes in the list with index
        '''
        print("###YOUR NOTES###")
        counter = 1
        for notes in self.noteList:
            print(counter, end=") ")
            print(notes, end='')
            counter = counter + 1
        print("################")
        print(len(self.doneList), "note(s) marked 'done'")

    def newAction(self): # new note case, take input, append to the noteList
        newNote = input("Type your note and press Enter\n") + '\n'
        self.noteList.append(newNote)
        self.printNotes()

    def doneAction(self): # mark done case, take index, remove from the noteList and append to the doneList
        index = int(input("Enter the index of the note to mark it done: ")) - 1
        tempNote = self.noteList[index]             # keep it temporarily
        self.noteList.remove(self.noteList[index])  # first, remove from the noteList
        self.doneList.append(tempNote)              # then, append it to doneList

    def editAction(self): # edit note case, take index and input, remove old one, insert new one
        index = int(input("Enter the index of the note to be edited: ")) - 1        # convert the input to integer since noteList needs integer index. -1 is to offset index 1 to 0.
        newNote = input("Type your edited note and press Enter\n") + '\n'           # added \n to make the file ready for the next note.
        self.noteList.remove(self.noteList[index])
        self.noteList.insert(index, newNote)
        self.printNotes()

    def deleteAction(self): # delete note case, take index, remove from the noteList
        index = int(input("Enter the index of the note to delete: ")) - 1
        self.noteList.remove(self.noteList[index])
        self.printNotes()

    def exitAction(self): # quiting process of the program, save the updated lists to txt files
        with open("notes.txt", "w") as file:
            for notes in self.noteList:
                file.write(str(notes))
        with open("done_notes.txt", "w") as file:
            for notes in self.doneList:
                file.write(str(notes))
        exit()